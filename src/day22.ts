import { Equal, Expect } from "./utils/testing";

/** because "dashing" implies speed */
type Dasher = "üí®";

/** representing dancing or grace */
type Dancer = "üíÉ";

/** a deer, prancing */
type Prancer = "ü¶å";

/** a star for the dazzling, slightly mischievous Vixen */
type Vixen = "üåü";

/** for the celestial body that shares its name */
type Comet = "‚òÑÔ∏è";
/** symbolizing love, as Cupid is the god of love */
type Cupid = "‚ù§Ô∏è";

/** representing thunder, as "Donner" means thunder in German */
type Donner = "üå©Ô∏è";

/** meaning lightning in German, hence the lightning bolt */
type Blitzen = "‚ö°";

/** for his famous red nose */
type Rudolph = "üî¥";

type Reindeer =
  | Dasher
  | Dancer
  | Prancer
  | Vixen
  | Comet
  | Cupid
  | Donner
  | Blitzen
  | Rudolph;

type ValidAmt = 9;
// for each given row test if all reindeers are available at least once
// if a reindeer is found a second time the row is invalid
// if we don't end up with the full amt of reindeers in the end the row is invalid
// do this by keeping a visited record, feels kinda wonky but works
type ValidateRow<
  Row extends unknown[],
  Visited extends Record<Reindeer, any[]> = Record<Reindeer, any[]>,
  N extends number[] = []
> = Row extends [infer Start extends Reindeer, ...infer Rest extends Reindeer[]]
  ? Visited[Start]["length"] extends 1
    ? false
    : ValidateRow<Rest, Visited & { [K in Start]: [0] }, [...N, 0]>
  : N["length"] extends ValidAmt
  ? true
  : false;

// Utils to merge the group arrays for easier checks
type MergeColumns<Row extends unknown[][]> = [...Row[0], ...Row[1], ...Row[2]];

type MergedMap<
  M extends unknown[][][],
  NM extends unknown[][] = []
> = M extends [
  infer Start extends Reindeer[][],
  ...infer Rest extends unknown[][][]
]
  ? MergedMap<Rest, [...NM, MergeColumns<Start>]>
  : NM;

// Handle Rows
type ValidateRows<M extends unknown[][]> = M extends [
  infer Start extends unknown[],
  ...infer Rest extends unknown[][]
]
  ? ValidateRow<Start> extends true
    ? ValidateRows<Rest>
    : false
  : true;

// Handle Columns
// pick the desired column out of each row and return a new array
// this way we can reuse all of our previous logic
type RotateRow<
  M extends unknown[],
  ColI extends number[] = [],
  NewM extends unknown[] = []
> = M extends [infer Start extends unknown[], ...infer Rest extends unknown[]]
  ? RotateRow<Rest, ColI, [...NewM, Start[ColI["length"]]]>
  : NewM;

// Apply rotation logic for each column
type RotateRows<
  M extends unknown[],
  MaxCols extends number = M["length"],
  ColI extends number[] = [],
  NewM extends unknown[][] = []
> = ColI["length"] extends MaxCols
  ? NewM
  : RotateRows<M, MaxCols, [...ColI, 0], [...NewM, RotateRow<M, ColI>]>;

// groups
// could be a loop yadda yadda, being a lazy boy today
// for each group we know, collect the columns that make up the grou and merge them
// this way we can just reuse the same validation logic as the rest
type ValidateGroups<M extends unknown[][][]> = ValidateRow<
  [...M[0][0], ...M[1][0], ...M[2][0]]
> &
  ValidateRow<[...M[0][1], ...M[1][1], ...M[2][1]]> &
  ValidateRow<[...M[0][2], ...M[1][2], ...M[2][2]]> &
  // mid
  ValidateRow<[...M[3][0], ...M[4][0], ...M[5][0]]> &
  ValidateRow<[...M[3][1], ...M[4][1], ...M[5][1]]> &
  ValidateRow<[...M[3][2], ...M[4][2], ...M[5][2]]> &
  // Lower
  ValidateRow<[...M[6][0], ...M[7][0], ...M[8][0]]> &
  ValidateRow<[...M[6][1], ...M[7][1], ...M[8][1]]> &
  ValidateRow<[...M[6][2], ...M[7][2], ...M[8][2]]>;

// apply all three types of Validation
type Validate<M extends unknown[][][]> = ValidateRows<MergedMap<M>> extends true
  ? ValidateRows<RotateRows<MergedMap<M>, M["length"]>> extends true
    ? ValidateGroups<M> extends true
      ? true
      : false
    : false
  : false;

type test_sudoku_1_actual = Validate<
  [
    [["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"]],
    [["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"]],
    [["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üî¥", "üå©Ô∏è", "üåü"]],
    [["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"]],
    [["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["üå©Ô∏è", "üî¥", "‚ö°"]],
    [["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"]]
  ]
>;
type test_sudoku_1 = Expect<Equal<test_sudoku_1_actual, true>>;

type test_sudoku_2_actual = Validate<
  [
    [["üå©Ô∏è", "üí®", "‚òÑÔ∏è"], ["üåü", "ü¶å", "‚ö°"], ["‚ù§Ô∏è", "üî¥", "üíÉ"]],
    [["üåü", "‚ö°", "‚ù§Ô∏è"], ["üî¥", "üíÉ", "‚òÑÔ∏è"], ["üå©Ô∏è", "üí®", "ü¶å"]],
    [["üî¥", "ü¶å", "üíÉ"], ["üí®", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "‚òÑÔ∏è", "üå©Ô∏è"], ["üíÉ", "‚ö°", "üî¥"], ["üí®", "ü¶å", "üåü"]],
    [["ü¶å", "üíÉ", "‚ö°"], ["üå©Ô∏è", "üåü", "üí®"], ["üî¥", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["üí®", "üåü", "üî¥"], ["ü¶å", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["‚ö°", "üíÉ", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "üî¥", "üí®"], ["‚ù§Ô∏è", "üå©Ô∏è", "ü¶å"], ["üíÉ", "üåü", "‚ö°"]],
    [["üíÉ", "‚ù§Ô∏è", "ü¶å"], ["‚ö°", "üî¥", "üåü"], ["‚òÑÔ∏è", "üå©Ô∏è", "üí®"]],
    [["‚ö°", "üå©Ô∏è", "üåü"], ["‚òÑÔ∏è", "üí®", "üíÉ"], ["ü¶å", "‚ù§Ô∏è", "üî¥"]]
  ]
>;
type test_sudoku_2 = Expect<Equal<test_sudoku_2_actual, true>>;

type test_sudoku_3_actual = Validate<
  [
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["üåü", "‚ö°", "üí®"], ["‚ù§Ô∏è", "üíÉ", "üî¥"], ["‚òÑÔ∏è", "üå©Ô∏è", "ü¶å"]],
    [["‚òÑÔ∏è", "üå©Ô∏è", "‚ù§Ô∏è"], ["‚ö°", "üåü", "ü¶å"], ["üíÉ", "üî¥", "üí®"]],
    [["üå©Ô∏è", "üíÉ", "üî¥"], ["ü¶å", "üí®", "‚ö°"], ["üåü", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["‚ù§Ô∏è", "‚òÑÔ∏è", "‚ö°"], ["üíÉ", "üå©Ô∏è", "üåü"], ["ü¶å", "üí®", "üî¥"]],
    [["üí®", "üåü", "ü¶å"], ["‚òÑÔ∏è", "üî¥", "‚ù§Ô∏è"], ["üå©Ô∏è", "üíÉ", "‚ö°"]],
    [["üíÉ", "üí®", "üåü"], ["üî¥", "ü¶å", "‚òÑÔ∏è"], ["‚ù§Ô∏è", "‚ö°", "üå©Ô∏è"]],
    [["üî¥", "‚ù§Ô∏è", "‚òÑÔ∏è"], ["üåü", "‚ö°", "üå©Ô∏è"], ["üí®", "ü¶å", "üíÉ"]],
    [["‚ö°", "ü¶å", "üå©Ô∏è"], ["üí®", "‚ù§Ô∏è", "üíÉ"], ["üî¥", "üåü", "‚òÑÔ∏è"]]
  ]
>;
type test_sudoku_3 = Expect<Equal<test_sudoku_3_actual, true>>;

type test_sudoku_4_actual = Validate<
  [
    [["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"]],
    [["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"]],
    [["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üî¥", "üå©Ô∏è", "üåü"]],
    [["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"], ["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["‚ö°", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üå©Ô∏è", "üî¥", "üåü"], ["ü¶å", "üí®", "üíÉ"]],
    [["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["‚ö°", "üî¥", "üåü"]],
    [["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"], ["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "üåü", "‚òÑÔ∏è"], ["üî¥", "üå©Ô∏è", "‚ö°"], ["üíÉ", "ü¶å", "üí®"]]
  ]
>;
type test_sudoku_4 = Expect<Equal<test_sudoku_4_actual, false>>;

type test_sudoku_5_actual = Validate<
  [
    [["üå©Ô∏è", "üí®", "‚òÑÔ∏è"], ["üåü", "ü¶å", "‚ö°"], ["‚ù§Ô∏è", "üî¥", "üíÉ"]],
    [["üåü", "‚ö°", "‚ù§Ô∏è"], ["üî¥", "üíÉ", "‚òÑÔ∏è"], ["üå©Ô∏è", "üí®", "ü¶å"]],
    [["üî¥", "ü¶å", "üíÉ"], ["üí®", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "‚òÑÔ∏è", "üå©Ô∏è"], ["üíÉ", "‚ö°", "üî¥"], ["üí®", "ü¶å", "üåü"]],
    [["ü¶å", "üíÉ", "‚ö°"], ["üå©Ô∏è", "üåü", "üí®"], ["üî¥", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["üí®", "üåü", "üî¥"], ["ü¶å", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["‚ö°", "üíÉ", "üå©Ô∏è"]],
    [["‚òÑÔ∏è", "üî¥", "üí®"], ["‚ù§Ô∏è", "üíÉ", "ü¶å"], ["üíÉ", "üåü", "‚ö°"]],
    [["üíÉ", "‚ù§Ô∏è", "ü¶å"], ["‚ö°", "üî¥", "üåü"], ["‚òÑÔ∏è", "üå©Ô∏è", "üí®"]],
    [["‚ö°", "üå©Ô∏è", "üåü"], ["‚òÑÔ∏è", "üí®", "üíÉ"], ["ü¶å", "‚ù§Ô∏è", "üî¥"]]
  ]
>;
type test_sudoku_5 = Expect<Equal<test_sudoku_5_actual, false>>;

type test_sudoku_6_actual = Validate<
  [
    [["‚ö°", "üî¥", "üå©Ô∏è"], ["ü¶å", "‚ù§Ô∏è", "üí®"], ["üí®", "üåü", "‚òÑÔ∏è"]],
    [["‚ù§Ô∏è", "ü¶å", "üåü"], ["üí®", "üåü", "üî¥"], ["üíÉ", "‚ö°", "üå©Ô∏è"]],
    [["üí®", "üíÉ", "üåü"], ["‚òÑÔ∏è", "‚ö°", "üå©Ô∏è"], ["üî¥", "‚ù§Ô∏è", "ü¶å"]],
    [["ü¶å", "‚ö°", "üî¥"], ["‚ù§Ô∏è", "üíÉ", "üí®"], ["‚òÑÔ∏è", "üå©Ô∏è", "üåü"]],
    [["üåü", "üå©Ô∏è", "üíÉ"], ["‚ö°", "üî¥", "‚òÑÔ∏è"], ["‚ù§Ô∏è", "ü¶å", "üí®"]],
    [["‚òÑÔ∏è", "üí®", "‚ù§Ô∏è"], ["üåü", "üå©Ô∏è", "ü¶å"], ["‚ö°", "üíÉ", "üî¥"]],
    [["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["üíÉ", "ü¶å", "‚ö°"], ["üåü", "üî¥", "‚ù§Ô∏è"]],
    [["üî¥", "‚ù§Ô∏è", "‚ö°"], ["üå©Ô∏è", "‚òÑÔ∏è", "üåü"], ["ü¶å", "üí®", "üíÉ"]],
    [["üíÉ", "üåü", "ü¶å"], ["üî¥", "üí®", "‚ù§Ô∏è"], ["üå©Ô∏è", "‚òÑÔ∏è", "‚ö°"]]
  ]
>;
type test_sudoku_6 = Expect<Equal<test_sudoku_6_actual, false>>;

type test_sudoku_7_actual = Validate<
  [
    [["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"]],
    [["üíÉ", "ü¶å", "‚òÑÔ∏è"], ["‚ù§Ô∏è", "üå©Ô∏è", "üåü"], ["‚ö°", "üî¥", "üí®"]],
    [["ü¶å", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üå©Ô∏è", "üåü", "‚ö°"], ["üî¥", "üí®", "üíÉ"]],
    [["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"], ["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"]],
    [["‚ù§Ô∏è", "üå©Ô∏è", "üåü"], ["‚ö°", "üî¥", "üí®"], ["üíÉ", "ü¶å", "‚òÑÔ∏è"]],
    [["üå©Ô∏è", "üåü", "‚ö°"], ["üî¥", "üí®", "üíÉ"], ["ü¶å", "‚òÑÔ∏è", "‚ù§Ô∏è"]],
    [["üåü", "‚ö°", "üî¥"], ["üí®", "üíÉ", "ü¶å"], ["‚òÑÔ∏è", "‚ù§Ô∏è", "üå©Ô∏è"]],
    [["‚ö°", "üî¥", "üí®"], ["üíÉ", "ü¶å", "‚òÑÔ∏è"], ["‚ù§Ô∏è", "üå©Ô∏è", "üåü"]],
    [["üî¥", "üí®", "üíÉ"], ["ü¶å", "‚òÑÔ∏è", "‚ù§Ô∏è"], ["üå©Ô∏è", "üåü", "‚ö°"]]
  ]
>;

type test_sudoku_7 = Expect<Equal<test_sudoku_7_actual, false>>;

type test_sudoku_8_actual = Validate<
  [
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]],
    [["ü¶å", "üî¥", "üíÉ"], ["üå©Ô∏è", "‚òÑÔ∏è", "üí®"], ["‚ö°", "‚ù§Ô∏è", "üåü"]]
  ]
>;

type test_sudoku_8 = Expect<Equal<test_sudoku_8_actual, false>>;
